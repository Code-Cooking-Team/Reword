{"version":3,"sources":["components/Icon/icons/home.tsx","components/Icon/icons/words.tsx","components/Icon/icons/profile.tsx","components/Icon/Icon.tsx","store/types/RouteName.ts","components/Nav/Nav.tsx","styles/colors.ts","styles/shadow.ts","styles/transitions.ts","components/Logo/Logo.tsx","store/state/helpers/reducerLogger.ts","store/state/initialState.ts","store/state/store.ts","store/state/reducer.ts","store/useRouter.ts","store/useWords.ts","screens/Home/Home.tsx","screens/Settings/Settings.tsx","screens/Words/Words.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["home","size","react_default","a","createElement","width","height","viewBox","fillRule","clipRule","d","words","profile","RouteName","sizes","normal","large","Icon","_ref","name","_ref$size","_ref$block","block","Container","icons","styled","div","_templateObject","p","Nav","prop","react","Nav_Container","NavButton","isActive","active","Home","onClick","onChange","Icon_Icon","Words","Settings","nav","Nav_templateObject","button","_templateObject2","props","activeCSS","inActiveCSS","css","_templateObject3","_templateObject4","reducerFunc","Logo","reSpring","useSpring","opacity","transform","delay","from","wordSpring","sepSpring","Logo_Container","First","style","Sep","Last","h1","Logo_templateObject","animated","span","Logo_templateObject2","Logo_templateObject3","Logo_templateObject4","initialState","route","createStore","state","action","type","Object","objectSpread","payload","concat","toConsumableArray","id","uuid","filter","word","Error","console","log","GlobalStateProvider","dispatch","useGlobalState","useRouter","_useGlobalState","slicedToArray","setRoute","useWords","addWord","removeWord","WordsCount","Home_templateObject","H1","Settings_templateObject","Header","Words_templateObject","AddButton","Words_templateObject2","screens","_screens","defineProperty","Logo_Logo","length","_useWords","_useState","useState","_useState2","newWord","setNewWord","_useState3","_useState4","search","setSearch","value","e","target","placeholder","includes","map","key","Content","main","App_templateObject","NavContainer","App_templateObject2","Boolean","window","location","hostname","match","render","_useGlobalState3","useEffect","localStorage","setItem","JSON","stringify","json","getItem","wordsFromStorage","parse","useWordsPersist","_useRouter","Page","Fragment","Nav_Nav","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9598e0c.chunk.js","sourcesContent":["import React from 'react'\n\nexport const home = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M5 12.5H2L12 3.5L22 12.5H19V20.5H13V14.5H11V20.5H5V12.5ZM17 10.69L12 6.19L7 10.69V18.5H9V12.5H15V18.5H17V10.69Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const words = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12.87 15.07L10.33 12.56L10.36 12.53C12.1 10.59 13.34 8.36 14.07 6H17V4H10V2H8V4H1V5.99H12.17C11.5 7.92 10.44 9.75 9 11.35C8.07 10.32 7.3 9.19 6.69 8H4.69C5.42 9.63 6.42 11.17 7.67 12.56L2.58 17.58L4 19L9 14L12.11 17.11L12.87 15.07ZM18.5 10H16.5L12 22H14L15.12 19H19.87L21 22H23L18.5 10ZM17.5 12.67L15.88 17H19.12L17.5 12.67Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const profile = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4ZM14 8C14 6.9 13.1 6 12 6C10.9 6 10 6.9 10 8C10 9.1 10.9 10 12 10C13.1 10 14 9.1 14 8ZM18 18C17.8 17.29 14.7 16 12 16C9.31 16 6.23 17.28 6 18H18ZM4 18C4 15.34 9.33 14 12 14C14.67 14 20 15.34 20 18V20H4V18Z\"\n        />\n    </svg>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as icons from './icons'\n\nconst sizes = {\n    normal: 24,\n    large: 62,\n}\n\nexport type IconName = keyof typeof icons\nexport type IconSize = keyof typeof sizes\n\ntype IconProps = {\n    name: IconName\n    size?: IconSize\n    block?: boolean\n}\n\nexport const Icon = ({ name, size = 'normal', block = false }: IconProps) => (\n    <Container block={block}>{icons[name](sizes[size])}</Container>\n)\n\nconst Container = styled.div<{ block: boolean }>`\n    display: ${p => (p.block ? 'block' : 'inline-block')};\n    vertical-align: middle;\n    svg {\n        fill: currentColor;\n    }\n`\n","export enum RouteName {\n    Home = 'home',\n    Words = 'words',\n    Settings = 'settings',\n}\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { white, gray, brand } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Icon } from '../Icon'\nimport { fast } from '../../styles/transitions'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const NAV_HEIGHT = 60\n\ntype NavProps = {\n    active: RouteName\n    onChange(page: RouteName): void\n}\n\nexport const Nav = (prop: NavProps) => {\n    return (\n        <Container>\n            <NavButton\n                isActive={prop.active === RouteName.Home}\n                onClick={() => prop.onChange(RouteName.Home)}\n            >\n                <Icon name=\"home\" block />\n                Home\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Words}\n                onClick={() => prop.onChange(RouteName.Words)}\n            >\n                <Icon name=\"words\" block />\n                Words\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Settings}\n                onClick={() => prop.onChange(RouteName.Settings)}\n            >\n                <Icon name=\"profile\" block />\n                Settings\n            </NavButton>\n        </Container>\n    )\n}\n\nconst Container = styled.nav`\n    background: ${white};\n    display: flex;\n    width: 100%;\n    min-height: ${NAV_HEIGHT}px;\n    justify-content: space-evenly;\n    box-shadow: ${barShadow};\n    overflow: hidden;\n`\n\nconst NavButton = styled.button<{ isActive: boolean }>`\n    color: ${props => (props.isActive ? brand : gray)};\n    display: block;\n    background: none;\n    border: none;\n    padding: 10px 25px;\n    position: relative;\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 100%;\n        height: 60px;\n        width: 60px;\n        position: absolute;\n        margin: auto;\n        top: -50px;\n        bottom: -50px;\n        left: -50px;\n        right: -50px;\n        ${props => (props.isActive ? activeCSS : inActiveCSS)};\n    }\n    &:active::after {\n        transition: opacity 0.6s ease-out, background 0.6s ease-out, transform 1s ease-out;\n        opacity: 0.1;\n        transform: scale(1.2);\n        background: ${brand};\n    }\n`\n\nconst activeCSS = css`\n    transition: all ${fast};\n    opacity: 0;\n    transform: scale(2);\n    background: ${brand};\n`\n\nconst inActiveCSS = css`\n    transition: all 0 ease;\n    opacity: 0.3;\n    transform: scale(1);\n    background: rgba(255, 255, 255, 0);\n`\n","export const brand = '#9438EA'\nexport const white = '#FFFFFF'\nexport const black = '#000000'\nexport const light = 'rgba(0, 0, 0, 0.1)'\nexport const muted = 'rgba(0, 0, 0, 0.3)'\nexport const gray = 'rgba(0, 0, 0, 0.6)'\nexport const good = '#AED900'\nexport const danger = '#EA388D'\n","export const barShadow = '0 0 10px rgba(0, 0, 0, 0.1)'\nexport const floatingShadow = '2px 2px 7px rgba(0, 0, 0, 0.1)'\n","export const fast = '0.2s ease'\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useSpring, animated } from 'react-spring'\nimport { brand } from '../../styles/colors'\n\nexport const Logo = () => {\n    const reSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 200,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const wordSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 300,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const sepSpring = useSpring({\n        transform: 'translate(0) scaleX(1)',\n        from: {\n            transform: 'translate(-1.2em) scaleX(5)',\n        },\n    })\n\n    return (\n        <Container>\n            <First style={reSpring}>Re</First>\n            <Sep style={sepSpring} />\n            <Last style={wordSpring}>word</Last>\n        </Container>\n    )\n}\n\nconst Container = styled.h1`\n    text-align: center;\n    font-size: 74px;\n    font-weight: normal;\n`\n\nconst First = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Last = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Sep = styled(animated.span)`\n    display: inline-block;\n    height: 1em;\n    width: 0.1em;\n    margin: 0 0.05em;\n    vertical-align: middle;\n    background-color: ${brand};\n`\n","import { Actions } from '../types/Actions'\nimport { State } from '../types/State'\nimport { reducer } from '../reducer'\n\nexport const reducerLogger = (reducerFunc: typeof reducer) => (\n    state: State,\n    action: Actions\n) => {\n    console.log('→', action.type, action.payload)\n    return reducerFunc(state, action)\n}\n","import { RouteName } from '../types/RouteName'\nimport { State } from './types/State'\n\nexport const initialState: State = {\n    route: RouteName.Home,\n    words: [],\n}\n","import { createStore } from 'react-hooks-global-state'\nimport { reducerLogger } from './helpers/reducerLogger'\nimport { initialState } from './initialState'\nimport { reducer } from './reducer'\n\nexport const { GlobalStateProvider, dispatch, useGlobalState } = createStore(\n    reducerLogger(reducer),\n    initialState\n)\n","import uuid from 'uuid'\nimport { Actions } from './types/Actions'\nimport { State } from './types/State'\n\nexport const reducer = (state: State, action: Actions) => {\n    switch (action.type) {\n        case 'ROUTER/SET_ROUTE':\n            return {\n                ...state,\n                route: action.payload.route,\n            }\n\n        case 'WORDS/SET':\n            return {\n                ...state,\n                words: action.payload,\n            }\n\n        case 'WORDS/ADD_WORD':\n            return {\n                ...state,\n                words: [...state.words, { id: uuid(), name: action.payload.name }],\n            }\n\n        case 'WORDS/REMOVE_WORD':\n            return {\n                ...state,\n                words: state.words.filter(word => word.id !== action.payload.id),\n            }\n\n        default:\n            throw new Error('[reducer] Unknown action type!')\n    }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { RouteName } from './types/RouteName'\n\nexport const useRouter = () => {\n    const [route] = useGlobalState('route')\n\n    const setRoute = (route: RouteName) => {\n        dispatch({ type: 'ROUTER/SET_ROUTE', payload: { route } })\n    }\n\n    return { route, setRoute }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { useEffect } from 'react'\n\nexport const useWords = () => {\n    const [words] = useGlobalState('words')\n\n    const addWord = (word: string) => {\n        dispatch({ type: 'WORDS/ADD_WORD', payload: { name: word } })\n    }\n\n    const removeWord = (id: string) => {\n        dispatch({ type: 'WORDS/REMOVE_WORD', payload: { id } })\n    }\n\n    return { words, addWord, removeWord }\n}\n\nexport const useWordsPersist = () => {\n    const [words] = useGlobalState('words')\n\n    useEffect(() => {\n        if (words.length) {\n            localStorage.setItem('words', JSON.stringify(words))\n        }\n    }, [words])\n\n    useEffect(() => {\n        const json = localStorage.getItem('words')\n        if (json) {\n            const wordsFromStorage = JSON.parse(json)\n            dispatch({ type: 'WORDS/SET', payload: wordsFromStorage })\n        }\n    }, [])\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Logo } from '../../components/Logo'\nimport { useWords } from '../../store'\n\nexport const Home = () => {\n    const { words } = useWords()\n    return (\n        <div>\n            <Logo />\n            <WordsCount>\n                You added <b>{words.length}</b> words\n            </WordsCount>\n        </div>\n    )\n}\n\nconst WordsCount = styled.div`\n    padding: 50px;\n    text-align: center;\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useRouter } from '../../store'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const Settings = () => {\n    const { setRoute } = useRouter()\n    return (\n        <div>\n            <H1>Settings</H1>\n            <button onClick={() => setRoute(RouteName.Home)}>Save settings</button>\n        </div>\n    )\n}\n\nconst H1 = styled.h1``\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWords } from '../../store'\n\nexport const Words = () => {\n    const { words, addWord, removeWord } = useWords()\n    const [newWord, setNewWord] = useState('')\n    const [search, setSearch] = useState('')\n\n    const addNewWord = () => {\n        addWord(newWord)\n        setNewWord('')\n    }\n\n    return (\n        <div>\n            <Header>Words</Header>\n            <input\n                type=\"search\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n                placeholder=\"Search…\"\n            />\n            <div>\n                {words\n                    .filter(word => word.name.includes(search))\n                    .map(word => (\n                        <div key={word.id}>\n                            <b>{word.name}</b>\n                            <button onClick={() => removeWord(word.id)}>x</button>\n                        </div>\n                    ))}\n            </div>\n            <input\n                type=\"text\"\n                value={newWord}\n                onChange={e => setNewWord(e.target.value)}\n            />\n            <AddButton onClick={addNewWord}>Add new word</AddButton>\n        </div>\n    )\n}\n\nconst Header = styled.h1``\n\nconst AddButton = styled.button``\n","import React, { ElementType } from 'react'\nimport styled from 'styled-components'\nimport { Nav, NAV_HEIGHT } from './components/Nav'\nimport { Home } from './screens/Home'\nimport { Settings } from './screens/Settings'\nimport { Words } from './screens/Words'\nimport { useRouter, useWordsPersist } from './store'\nimport { RouteName } from './store/types/RouteName'\n\nconst screens: Record<RouteName, ElementType> = {\n    [RouteName.Home]: Home,\n    [RouteName.Words]: Words,\n    [RouteName.Settings]: Settings,\n}\n\nexport const App = () => {\n    useWordsPersist()\n    const { route, setRoute } = useRouter()\n    const Page = screens[route]\n\n    return (\n        <>\n            <Content>\n                <Page />\n            </Content>\n            <NavContainer>\n                <Nav active={route} onChange={setRoute} />\n            </NavContainer>\n        </>\n    )\n}\n\nconst Content = styled.main`\n    padding-bottom: ${NAV_HEIGHT}px;\n`\n\nconst NavContainer = styled.div`\n    position: fixed;\n    bottom: 0;\n    right: 0;\n    left: 0;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/global.css'\nimport { GlobalStateProvider } from './store'\n\nrender(\n    <GlobalStateProvider>\n        <App />\n    </GlobalStateProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}