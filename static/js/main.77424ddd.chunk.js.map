{"version":3,"sources":["components/Logo/Logo.tsx","styles/colors.ts","screens/Home/Home.tsx","screens/Words/Words.tsx","components/Icon/icons/home.tsx","components/Icon/icons/words.tsx","components/Icon/icons/profile.tsx","components/Icon/Icon.tsx","components/Nav/Nav.tsx","styles/shadow.ts","styles/transitions.ts","screens/Settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Logo","reSpring","useSpring","opacity","delay","from","ordSpring","sepSpring","transform","react_default","a","createElement","Container","First","style","Sep","Last","styled","h1","_templateObject","animated","span","_templateObject2","_templateObject3","_templateObject4","Start","button","Home_templateObject","H1","Words_templateObject","Add","Words_templateObject2","Remove","Words_templateObject3","home","size","width","height","viewBox","fillRule","clipRule","d","words","profile","sizes","normal","large","Icon","_ref","name","_ref$size","_ref$block","block","Icon_Container","icons","div","Icon_templateObject","p","Nav","prop","react","Nav_Container","NavButton","isActive","active","onClick","onChange","Icon_Icon","Nav_templateObject","Nav_templateObject2","props","activeCSS","inActiveCSS","css","Nav_templateObject3","Nav_templateObject4","Settings_templateObject","screens","Logo_Logo","_useState3","useState","_useState4","Object","slicedToArray","newWord","setNewWord","_useState5","_useState6","search","setSearch","_useList","_useState","JSON","parse","localStorage","getItem","_useState2","list","setList","useEffect","setItem","stringify","add","concat","toConsumableArray","id","uuid","remove","removeWordId","filter","word","useList","type","value","e","target","el","indexOf","map","key","settings","Settings_H1","NavPosition","App_templateObject","Boolean","window","location","hostname","match","render","_React$useState","React","_React$useState2","setActive","Page","Nav_Nav","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77424ddd.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useSpring, animated } from 'react-spring'\nimport { brand } from '../../styles/colors'\n\nexport const Logo = () => {\n    const reSpring = useSpring({ opacity: 1, delay: 200, from: { opacity: 0 } })\n    const ordSpring = useSpring({ opacity: 1, delay: 400, from: { opacity: 0 } })\n    const sepSpring = useSpring({\n        transform: 'translate(0)',\n        from: { transform: 'translate(-1.2em)' },\n    })\n\n    return (\n        <Container>\n            <First style={reSpring}>Re</First>\n            <Sep style={sepSpring}>|</Sep>\n            <Last style={ordSpring}>word</Last>\n        </Container>\n    )\n}\n\nconst Container = styled.h1`\n    display: flex;\n    justify-content: center;\n    font-size: 74px;\n    font-weight: normal;\n`\n\nconst First = styled(animated.span)`\n    display: block;\n`\n\nconst Last = styled(animated.span)`\n    display: block;\n`\n\nconst Sep = styled(animated.span)`\n    display: block;\n    font-weight: bold;\n    color: ${brand};\n`\n","export const brand = '#9438EA'\nexport const white = '#FFFFFF'\nexport const black = '#000000'\nexport const light = 'rgba(0, 0, 0, 0.1)'\nexport const muted = 'rgba(0, 0, 0, 0.3)'\nexport const gray = 'rgba(0, 0, 0, 0.6)'\nexport const good = '#AED900'\nexport const danger = '#EA388D'\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Logo } from '../../components/Logo'\n\nexport const Home = () => {\n    return (\n        <div>\n            <Logo />\n            <Start>As</Start>\n        </div>\n    )\n}\n\nconst Start = styled.button`\n    background: red;\n`\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport uuid from 'uuid'\n\nconst useList = () => {\n    const [list, setList] = useState(JSON.parse(localStorage.getItem('words') || '[]'))\n\n    useEffect(() => {\n        localStorage.setItem('words', JSON.stringify(list))\n    }, [list])\n\n    return {\n        list,\n        add: newWord => {\n            if (newWord) {\n                return setList([...list, { name: newWord, id: uuid() }])\n            }\n        },\n        remove: removeWordId => setList(list.filter(word => word.id != removeWordId)),\n    }\n}\n\nexport const Words = () => {\n    const [newWord, setNewWord] = useState('')\n    const [search, setSearch] = useState('')\n    const { list, add, remove } = useList()\n\n    const searchFilter = el => {\n        return el.name.indexOf(search) > -1\n    }\n\n    return (\n        <div>\n            <H1>Words - {newWord}</H1>\n            <input\n                type=\"search\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n            />\n            <div>\n                {list.filter(searchFilter).map(a => (\n                    <div key={a.id}>\n                        {a.name}\n                        <Remove\n                            onClick={() => {\n                                remove(a.id)\n                            }}\n                        >\n                            X\n                        </Remove>\n                    </div>\n                ))}\n            </div>\n            <input\n                type=\"text\"\n                value={newWord}\n                onChange={e => setNewWord(e.target.value)}\n            />\n            <Add\n                onClick={() => {\n                    setNewWord('')\n                    add(newWord)\n                }}\n            >\n                As\n            </Add>\n        </div>\n    )\n}\n\nconst H1 = styled.h1`\n    background: red;\n`\n\nconst Add = styled.button`\n    background: red;\n`\n\nconst Remove = styled.button`\n    background: red;\n    padding-left: 2px;\n`\n","import React from 'react'\n\nexport const home = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M5 12.5H2L12 3.5L22 12.5H19V20.5H13V14.5H11V20.5H5V12.5ZM17 10.69L12 6.19L7 10.69V18.5H9V12.5H15V18.5H17V10.69Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const words = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12.87 15.07L10.33 12.56L10.36 12.53C12.1 10.59 13.34 8.36 14.07 6H17V4H10V2H8V4H1V5.99H12.17C11.5 7.92 10.44 9.75 9 11.35C8.07 10.32 7.3 9.19 6.69 8H4.69C5.42 9.63 6.42 11.17 7.67 12.56L2.58 17.58L4 19L9 14L12.11 17.11L12.87 15.07ZM18.5 10H16.5L12 22H14L15.12 19H19.87L21 22H23L18.5 10ZM17.5 12.67L15.88 17H19.12L17.5 12.67Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const profile = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4ZM14 8C14 6.9 13.1 6 12 6C10.9 6 10 6.9 10 8C10 9.1 10.9 10 12 10C13.1 10 14 9.1 14 8ZM18 18C17.8 17.29 14.7 16 12 16C9.31 16 6.23 17.28 6 18H18ZM4 18C4 15.34 9.33 14 12 14C14.67 14 20 15.34 20 18V20H4V18Z\"\n        />\n    </svg>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as icons from './icons'\n\nconst sizes = {\n    normal: 24,\n    large: 62,\n}\n\nexport type IconName = keyof typeof icons\nexport type IconSize = keyof typeof sizes\n\ntype IconProps = {\n    name: IconName\n    size?: IconSize\n    block?: boolean\n}\n\nexport const Icon = ({ name, size = 'normal', block = false }: IconProps) => (\n    <Container block={block}>{icons[name](sizes[size])}</Container>\n)\n\nconst Container = styled.div<{ block: boolean }>`\n    display: ${p => (p.block ? 'block' : 'inline-block')};\n    vertical-align: middle;\n    svg {\n        fill: currentColor;\n    }\n`\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { white, gray, brand } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Icon } from '../Icon'\nimport { fast } from '../../styles/transitions'\n\ntype NavProps = {\n    active: string\n    onChange(page: string): void\n}\n\nexport const Nav = (prop: NavProps) => {\n    return (\n        <Container>\n            <NavButton\n                isActive={prop.active === 'home'}\n                onClick={() => prop.onChange('home')}\n            >\n                <Icon name=\"home\" block />\n                Home\n            </NavButton>\n            <NavButton\n                isActive={prop.active === 'words'}\n                onClick={() => prop.onChange('words')}\n            >\n                <Icon name=\"words\" block />\n                Words\n            </NavButton>\n            <NavButton\n                isActive={prop.active === 'settings'}\n                onClick={() => prop.onChange('settings')}\n            >\n                <Icon name=\"profile\" block />\n                Settings\n            </NavButton>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    background: ${white};\n    display: flex;\n    width: 100%;\n    min-height: 60px;\n    justify-content: space-evenly;\n    box-shadow: ${barShadow};\n    overflow: hidden;\n`\n\nconst NavButton = styled.button<{ isActive: boolean }>`\n    color: ${props => (props.isActive ? brand : gray)};\n    display: block;\n    background: none;\n    border: none;\n    padding: 10px 25px;\n    position: relative;\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 100%;\n        height: 60px;\n        width: 60px;\n        position: absolute;\n        margin: auto;\n        top: -50px;\n        bottom: -50px;\n        left: -50px;\n        right: -50px;\n        ${props => (props.isActive ? activeCSS : inActiveCSS)};\n    }\n    &:active::after {\n        transition: opacity 0.6s ease-out, background 0.6s ease-out, transform 1s ease-out;\n        opacity: 0.1;\n        transform: scale(1.2);\n        background: ${brand};\n    }\n`\n\nconst activeCSS = css`\n    transition: all ${fast};\n    opacity: 0;\n    transform: scale(2);\n    background: ${brand};\n`\n\nconst inActiveCSS = css`\n    transition: all 0 ease;\n    opacity: 0.3;\n    transform: scale(1);\n    background: rgba(255, 255, 255, 0);\n`\n","export const barShadow = '0 0 10px rgba(0, 0, 0, 0.1)'\nexport const floatingShadow = '2px 2px 7px rgba(0, 0, 0, 0.1)'\n","export const fast = '0.2s ease'\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport const Settings = () => {\n    return (\n        <div>\n            <H1>Settings</H1>\n        </div>\n    )\n}\n\nconst H1 = styled.h1`\n    background: red;\n`\n","import * as React from 'react'\nimport { Home } from './screens/Home'\nimport { Words } from './screens/Words'\nimport { Nav } from './components/Nav'\nimport { Settings } from './screens/Settings'\nimport styled from 'styled-components'\n\nconst screens = {\n    home: Home,\n    words: Words,\n    settings: Settings,\n}\n\nexport const App = () => {\n    const [active, setActive] = React.useState('home')\n    const Page = screens[active]\n\n    return (\n        <div>\n            <Page />\n            <NavPosition>\n                <Nav active={active} onChange={setActive} />\n            </NavPosition>\n        </div>\n    )\n}\n\nconst NavPosition = styled.div`\n    position: fixed;\n    bottom: 0;\n    right: 0;\n    left: 0;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './styles/global.css'\n\nrender(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}