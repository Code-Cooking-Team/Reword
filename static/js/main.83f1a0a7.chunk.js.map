{"version":3,"sources":["styles/colors.ts","components/Icon/icons/home.tsx","components/Icon/icons/words.tsx","components/Icon/icons/profile.tsx","components/Icon/Icon.tsx","store/types/RouteName.ts","components/Nav/Nav.tsx","store/state/helpers/reducerLogger.ts","styles/shadow.ts","styles/transitions.ts","store/state/initialState.ts","store/state/store.ts","store/state/reducer.ts","store/useRouter.ts","store/useWords.ts","components/Keyboard/getKeysForWord.tsx","components/Keyboard/Key.tsx","components/Keyboard/Keyboard.tsx","screens/Game/Game.tsx","components/Logo/Logo.tsx","screens/Home/Home.tsx","screens/Settings/Settings.tsx","screens/Words/Words.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["brand","home","size","react_default","a","createElement","width","height","viewBox","fillRule","clipRule","d","words","profile","RouteName","sizes","normal","large","Icon","_ref","name","_ref$size","_ref$block","block","Container","icons","styled","div","_templateObject","p","reducerFunc","Nav","prop","react","Nav_Container","NavButton","isActive","active","Home","onClick","onChange","Icon_Icon","Words","Settings","nav","Nav_templateObject","button","_templateObject2","props","activeCSS","inActiveCSS","css","_templateObject3","_templateObject4","initialState","route","createStore","state","action","type","Object","objectSpread","payload","concat","toConsumableArray","id","uuid","filter","word","Error","console","log","GlobalStateProvider","dispatch","useGlobalState","useRouter","_useGlobalState","slicedToArray","setRoute","useWords","addWord","translation","example","removeWord","randomWord","Math","floor","random","length","special","KEYS","map","row","split","getKey","key","fakeKeys","seedRandom","visible","includes","Key","Key_Container","isSpace","symbol","Key_templateObject","highlight","Key_templateObject2","Keyboard","Keyboard_Container","originalWord","arguments","undefined","toLowerCase","k","getKeysForWord","i","Row","Key_Key","onPress","Keyboard_templateObject","Keyboard_templateObject2","Game_templateObject","Bottom","Game_templateObject2","Logo","reSpring","useSpring","opacity","transform","delay","from","wordSpring","sepSpring","Logo_Container","First","style","Sep","Last","h1","Logo_templateObject","animated","span","Logo_templateObject2","Logo_templateObject3","Logo_templateObject4","WordsCount","Home_templateObject","H1","Settings_templateObject","Header","Words_templateObject","AddButton","Words_templateObject2","screens","_screens","defineProperty","Logo_Logo","Game","_useWords","_useState","useState","_useState2","search","setSearch","_useState3","_useState4","setWord","_useState5","_useState6","setTranslation","_useState7","_useState8","setExample","value","e","target","placeholder","trim","progress","setProgress","wordRight","substr","Game_Container","Keyboard_Keyboard","Content","main","App_templateObject","NavContainer","App_templateObject2","Boolean","window","location","hostname","match","render","_useGlobalState3","useEffect","localStorage","setItem","JSON","stringify","json","getItem","wordsFromStorage","parse","useWordsPersist","_useRouter","Page","Fragment","Nav_Nav","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83f1a0a7.chunk.js","sourcesContent":["export const brand = '#9438EA'\nexport const white = '#FFFFFF'\nexport const black = '#000000'\nexport const light = 'rgba(0, 0, 0, 0.1)'\nexport const muted = 'rgba(0, 0, 0, 0.3)'\nexport const gray = 'rgba(0, 0, 0, 0.6)'\nexport const good = '#AED900'\nexport const danger = '#EA388D'\n","import React from 'react'\n\nexport const home = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M5 12.5H2L12 3.5L22 12.5H19V20.5H13V14.5H11V20.5H5V12.5ZM17 10.69L12 6.19L7 10.69V18.5H9V12.5H15V18.5H17V10.69Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const words = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12.87 15.07L10.33 12.56L10.36 12.53C12.1 10.59 13.34 8.36 14.07 6H17V4H10V2H8V4H1V5.99H12.17C11.5 7.92 10.44 9.75 9 11.35C8.07 10.32 7.3 9.19 6.69 8H4.69C5.42 9.63 6.42 11.17 7.67 12.56L2.58 17.58L4 19L9 14L12.11 17.11L12.87 15.07ZM18.5 10H16.5L12 22H14L15.12 19H19.87L21 22H23L18.5 10ZM17.5 12.67L15.88 17H19.12L17.5 12.67Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const profile = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4ZM14 8C14 6.9 13.1 6 12 6C10.9 6 10 6.9 10 8C10 9.1 10.9 10 12 10C13.1 10 14 9.1 14 8ZM18 18C17.8 17.29 14.7 16 12 16C9.31 16 6.23 17.28 6 18H18ZM4 18C4 15.34 9.33 14 12 14C14.67 14 20 15.34 20 18V20H4V18Z\"\n        />\n    </svg>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as icons from './icons'\n\nconst sizes = {\n    normal: 24,\n    large: 62,\n}\n\nexport type IconName = keyof typeof icons\nexport type IconSize = keyof typeof sizes\n\ntype IconProps = {\n    name: IconName\n    size?: IconSize\n    block?: boolean\n}\n\nexport const Icon = ({ name, size = 'normal', block = false }: IconProps) => (\n    <Container block={block}>{icons[name](sizes[size])}</Container>\n)\n\nconst Container = styled.div<{ block: boolean }>`\n    display: ${p => (p.block ? 'block' : 'inline-block')};\n    vertical-align: middle;\n    svg {\n        fill: currentColor;\n    }\n`\n","export enum RouteName {\n    Home = 'home',\n    Words = 'words',\n    Settings = 'settings',\n    Game = 'game',\n}\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { white, gray, brand } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Icon } from '../Icon'\nimport { fast } from '../../styles/transitions'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const NAV_HEIGHT = 60\n\ntype NavProps = {\n    active: RouteName\n    onChange(page: RouteName): void\n}\n\nexport const Nav = (prop: NavProps) => {\n    return (\n        <Container>\n            <NavButton\n                isActive={prop.active === RouteName.Home}\n                onClick={() => prop.onChange(RouteName.Home)}\n            >\n                <Icon name=\"home\" block />\n                Home\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Words}\n                onClick={() => prop.onChange(RouteName.Words)}\n            >\n                <Icon name=\"words\" block />\n                Words\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Settings}\n                onClick={() => prop.onChange(RouteName.Settings)}\n            >\n                <Icon name=\"profile\" block />\n                Settings\n            </NavButton>\n        </Container>\n    )\n}\n\nconst Container = styled.nav`\n    background: ${white};\n    display: flex;\n    width: 100%;\n    min-height: ${NAV_HEIGHT}px;\n    justify-content: space-evenly;\n    box-shadow: ${barShadow};\n    overflow: hidden;\n`\n\nconst NavButton = styled.button<{ isActive: boolean }>`\n    color: ${props => (props.isActive ? brand : gray)};\n    display: block;\n    background: none;\n    border: none;\n    padding: 10px 25px;\n    position: relative;\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 100%;\n        height: 60px;\n        width: 60px;\n        position: absolute;\n        margin: auto;\n        top: -50px;\n        bottom: -50px;\n        left: -50px;\n        right: -50px;\n        ${props => (props.isActive ? activeCSS : inActiveCSS)};\n    }\n    &:active::after {\n        transition: opacity 0.6s ease-out, background 0.6s ease-out, transform 1s ease-out;\n        opacity: 0.1;\n        transform: scale(1.2);\n        background: ${brand};\n    }\n`\n\nconst activeCSS = css`\n    transition: all ${fast};\n    opacity: 0;\n    transform: scale(2);\n    background: ${brand};\n`\n\nconst inActiveCSS = css`\n    transition: all 0 ease;\n    opacity: 0.3;\n    transform: scale(1);\n    background: rgba(255, 255, 255, 0);\n`\n","import { Actions } from '../types/Actions'\nimport { State } from '../types/State'\nimport { reducer } from '../reducer'\n\nexport const reducerLogger = (reducerFunc: typeof reducer) => (\n    state: State,\n    action: Actions\n) => {\n    console.log('→', action.type, action.payload)\n    return reducerFunc(state, action)\n}\n","export const barShadow = '0 0 10px rgba(0, 0, 0, 0.1)'\nexport const floatingShadow = '2px 2px 7px rgba(0, 0, 0, 0.1)'\n","export const fast = '0.2s ease'\n","import { RouteName } from '../types/RouteName'\nimport { State } from './types/State'\n\nexport const initialState: State = {\n    route: RouteName.Home,\n    words: [],\n}\n","import { createStore } from 'react-hooks-global-state'\nimport { reducerLogger } from './helpers/reducerLogger'\nimport { initialState } from './initialState'\nimport { reducer } from './reducer'\n\nexport const { GlobalStateProvider, dispatch, useGlobalState } = createStore(\n    reducerLogger(reducer),\n    initialState\n)\n","import uuid from 'uuid'\nimport { Actions } from './types/Actions'\nimport { State } from './types/State'\n\nexport const reducer = (state: State, action: Actions) => {\n    switch (action.type) {\n        case 'ROUTER/SET_ROUTE':\n            return {\n                ...state,\n                route: action.payload.route,\n            }\n\n        case 'WORDS/SET':\n            return {\n                ...state,\n                words: action.payload,\n            }\n\n        case 'WORDS/ADD_WORD':\n            return {\n                ...state,\n                words: [...state.words, { id: uuid(), ...action.payload }],\n            }\n\n        case 'WORDS/REMOVE_WORD':\n            return {\n                ...state,\n                words: state.words.filter(word => word.id !== action.payload.id),\n            }\n\n        default:\n            throw new Error('[reducer] Unknown action type!')\n    }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { RouteName } from './types/RouteName'\n\nexport const useRouter = () => {\n    const [route] = useGlobalState('route')\n\n    const setRoute = (route: RouteName) => {\n        dispatch({ type: 'ROUTER/SET_ROUTE', payload: { route } })\n    }\n\n    return { route, setRoute }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { useEffect } from 'react'\n\nexport const useWords = () => {\n    const [words] = useGlobalState('words')\n\n    const addWord = (name: string, translation: string, example?: string) => {\n        dispatch({ type: 'WORDS/ADD_WORD', payload: { name, translation, example } })\n    }\n\n    const removeWord = (id: string) => {\n        dispatch({ type: 'WORDS/REMOVE_WORD', payload: { id } })\n    }\n\n    const randomWord = () => {\n        return words[Math.floor(Math.random() * words.length)]\n    }\n\n    return { words, addWord, removeWord, randomWord }\n}\n\nexport const useWordsPersist = () => {\n    const [words] = useGlobalState('words')\n\n    useEffect(() => {\n        if (words.length) {\n            localStorage.setItem('words', JSON.stringify(words))\n        }\n    }, [words])\n\n    useEffect(() => {\n        const json = localStorage.getItem('words')\n        if (json) {\n            const wordsFromStorage = JSON.parse(json)\n            dispatch({ type: 'WORDS/SET', payload: wordsFromStorage })\n        }\n    }, [])\n}\n","import seedRandom from 'seed-random'\n\nconst special = \"' ,\"\n\nconst KEYS = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm', special].map(row => row.split(''))\n\ntype WordKey = {\n    visible: boolean\n    key: string\n}\n\ntype WordKeyList = WordKey[][]\n\nexport const getKeysForWord = (originalWord: string, fakeKeys = 0): WordKeyList => {\n    const word = originalWord.toLowerCase()\n\n    return KEYS.map(row => row.map(k => getKey(k, word, fakeKeys)))\n}\n\nconst getKey = (key: string, word: string, fakeKeys: number): WordKey => {\n    const random = fakeKeys ? seedRandom(key + word)() : 0\n\n    return {\n        key,\n        visible: word.includes(key) || (fakeKeys > random && !special.includes(key)),\n    }\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { brand, white } from '../../styles/colors'\nimport { fast } from '../../styles/transitions'\n\ninterface KeyProps {\n    onClick(): void\n    symbol?: string\n    visible?: boolean\n}\n\nexport const Key = (props: KeyProps) => (\n    <Container\n        visible={props.visible}\n        onClick={props.onClick}\n        isSpace={props.symbol === ' '}\n    >\n        {props.symbol}\n    </Container>\n)\n\nconst Container = styled.button<{ visible?: boolean; isSpace?: boolean }>`\n    width: ${p => (p.isSpace ? '47vw' : '8vw')};\n    height: 7vh;\n    padding: 0;\n    margin: 0 4px;\n    border: 2px solid ${brand};\n    opacity: ${p => (p.visible ? 1 : 0.1)};\n    border-radius: 4px;\n    color: ${brand};\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    background: none;\n    transition: all ${fast};\n\n    ${p => p.visible && highlight}\n`\nconst highlight = css`\n    &:active {\n        outline: none;\n        background-color: ${brand};\n        color: ${white};\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { getKeysForWord } from './getKeysForWord'\nimport { white } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Key } from './Key'\n\ninterface KeyboardProps {\n    word: string\n    onPress(key: string): void\n    fakeKeys?: number\n}\n\nexport const Keyboard = (props: KeyboardProps) => (\n    <Container>\n        {getKeysForWord(props.word, props.fakeKeys).map((row, i) => (\n            <Row key={i}>\n                {row.map(k => (\n                    <Key\n                        key={k.key}\n                        symbol={k.key}\n                        visible={k.visible}\n                        onClick={() => {\n                            if (k.visible) {\n                                props.onPress(k.key)\n                            }\n                        }}\n                    />\n                ))}\n            </Row>\n        ))}\n    </Container>\n)\n\nconst Container = styled.div`\n    padding: 0 0 50px;\n    background: ${white};\n    box-shadow: ${barShadow};\n`\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 10px 5px 0;\n`\n\nexport const vibrateOk = () => navigator.vibrate(1)\nexport const vibrateBad = () => navigator.vibrate([1, 100, 1, 100, 1])\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWords } from '../../store'\nimport { Keyboard } from '../../components/Keyboard'\nimport { NAV_HEIGHT } from '../../components/Nav'\n\nexport const Game = () => {\n    const { randomWord } = useWords()\n    const [progress, setProgress] = useState(0)\n    const [word, setWord] = useState(randomWord())\n\n    const wordRight = word.name.substr(progress)\n\n    return (\n        <Container>\n            <h1>{word.translation}</h1>\n            <div>{word.name.substr(0, progress)}</div>\n            {progress === word.name.length && (\n                <div>\n                    <h5>{word.example}</h5>\n                    <h2>Done!</h2>\n                    <button\n                        onClick={() => {\n                            setWord(randomWord())\n                            setProgress(0)\n                        }}\n                    >\n                        Next word\n                    </button>\n                </div>\n            )}\n            <Bottom>\n                <Keyboard\n                    word={wordRight}\n                    onPress={key => {\n                        if (key === word.name[progress]) {\n                            setProgress(progress + 1)\n                        }\n                    }}\n                />\n            </Bottom>\n        </Container>\n    )\n}\n\nconst Container = styled.div``\n\nconst Bottom = styled.div`\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: ${NAV_HEIGHT}px;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useSpring, animated } from 'react-spring'\nimport { brand } from '../../styles/colors'\n\nexport const Logo = () => {\n    const reSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 200,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const wordSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 300,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const sepSpring = useSpring({\n        transform: 'translate(0) scaleX(1)',\n        from: {\n            transform: 'translate(-1.2em) scaleX(5)',\n        },\n    })\n\n    return (\n        <Container>\n            <First style={reSpring}>Re</First>\n            <Sep style={sepSpring} />\n            <Last style={wordSpring}>word</Last>\n        </Container>\n    )\n}\n\nconst Container = styled.h1`\n    text-align: center;\n    font-size: 74px;\n    font-weight: normal;\n`\n\nconst First = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Last = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Sep = styled(animated.span)`\n    display: inline-block;\n    height: 1em;\n    width: 0.1em;\n    margin: 0 0.05em;\n    vertical-align: middle;\n    background-color: ${brand};\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Logo } from '../../components/Logo'\nimport { useWords, useRouter } from '../../store'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const Home = () => {\n    const { setRoute } = useRouter()\n    const { words } = useWords()\n    return (\n        <div>\n            <Logo />\n            <button onClick={() => setRoute(RouteName.Game)}>Play</button>\n            <WordsCount>\n                You added <b>{words.length}</b> words\n            </WordsCount>\n        </div>\n    )\n}\n\nconst WordsCount = styled.div`\n    padding: 50px;\n    text-align: center;\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useRouter } from '../../store'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const Settings = () => {\n    const { setRoute } = useRouter()\n    return (\n        <div>\n            <H1>Settings</H1>\n            <button onClick={() => setRoute(RouteName.Home)}>Save settings</button>\n        </div>\n    )\n}\n\nconst H1 = styled.h1``\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWords } from '../../store'\n\nexport const Words = () => {\n    const { words, addWord, removeWord } = useWords()\n    const [search, setSearch] = useState('')\n\n    const [word, setWord] = useState('')\n    const [translation, setTranslation] = useState('')\n    const [example, setExample] = useState('')\n\n    const addNewWord = () => {\n        addWord(word.trim(), translation.trim(), example.trim())\n        setWord('')\n        setTranslation('')\n        setExample('')\n    }\n\n    return (\n        <div>\n            <Header>Words</Header>\n            <input\n                type=\"search\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n                placeholder=\"Search…\"\n            />\n            <table>\n                <thead>\n                    <tr>\n                        <td>Word</td>\n                        <td>Translation</td>\n                        <td>Example</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {words\n                        .filter(word => word.name.includes(search))\n                        .map(word => (\n                            <tr key={word.id}>\n                                <td>\n                                    <b>{word.name}</b>\n                                </td>\n                                <td>\n                                    <i>{word.translation}</i>\n                                </td>\n                                <td>{word.example && <small>{word.example}</small>}</td>\n                                <td>\n                                    <button onClick={() => removeWord(word.id)}>x</button>\n                                </td>\n                            </tr>\n                        ))}\n                </tbody>\n            </table>\n            <div>\n                Word:\n                <input type=\"text\" value={word} onChange={e => setWord(e.target.value)} />\n            </div>\n            <div>\n                Translation:\n                <input\n                    type=\"text\"\n                    value={translation}\n                    onChange={e => setTranslation(e.target.value)}\n                />\n            </div>\n            <div>\n                Example:\n                <input\n                    type=\"text\"\n                    value={example}\n                    onChange={e => setExample(e.target.value)}\n                />\n            </div>\n            <AddButton onClick={addNewWord}>Add new word</AddButton>\n        </div>\n    )\n}\n\nconst Header = styled.h1``\n\nconst AddButton = styled.button``\n","import React, { ElementType } from 'react'\nimport styled from 'styled-components'\nimport { Nav, NAV_HEIGHT } from './components/Nav'\nimport { Game } from './screens/Game/Game'\nimport { Home } from './screens/Home'\nimport { Settings } from './screens/Settings'\nimport { Words } from './screens/Words'\nimport { useRouter, useWordsPersist } from './store'\nimport { RouteName } from './store/types/RouteName'\n\nconst screens: Record<RouteName, ElementType> = {\n    [RouteName.Home]: Home,\n    [RouteName.Words]: Words,\n    [RouteName.Settings]: Settings,\n    [RouteName.Game]: Game,\n}\n\nexport const App = () => {\n    useWordsPersist()\n    const { route, setRoute } = useRouter()\n    const Page = screens[route]\n\n    return (\n        <>\n            <Content>\n                <Page />\n            </Content>\n            <NavContainer>\n                <Nav active={route} onChange={setRoute} />\n            </NavContainer>\n        </>\n    )\n}\n\nconst Content = styled.main`\n    padding-bottom: ${NAV_HEIGHT}px;\n`\n\nconst NavContainer = styled.div`\n    position: fixed;\n    bottom: 0;\n    right: 0;\n    left: 0;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/global.css'\nimport { GlobalStateProvider } from './store'\n\nrender(\n    <GlobalStateProvider>\n        <App />\n    </GlobalStateProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}