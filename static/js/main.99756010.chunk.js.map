{"version":3,"sources":["styles/colors.ts","components/Icon/icons/home.tsx","components/Icon/icons/play.tsx","components/Icon/icons/plus.tsx","components/Icon/icons/profile.tsx","components/Icon/icons/words.tsx","components/Icon/Icon.tsx","store/types/RouteName.ts","components/Nav/Nav.tsx","styles/shadow.ts","styles/transitions.ts","components/Keyboard/getKeysForWord.tsx","components/Keyboard/Key.tsx","components/Keyboard/Keyboard.tsx","components/Typewriter/Typewriter.tsx","store/state/helpers/reducerLogger.ts","store/state/initialState.ts","store/state/store.ts","store/state/reducer.ts","store/useRouter.ts","store/useWords.ts","screens/Game/Game.tsx","components/Logo/Logo.tsx","screens/Home/Home.tsx","screens/Settings/Settings.tsx","screens/Words/Words.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["brand","white","home","size","react_default","a","createElement","width","height","viewBox","fillRule","clipRule","d","play","plus","profile","words","RouteName","sizes","normal","large","Icon","_ref","name","_ref$size","_ref$block","block","Container","icons","styled","div","_templateObject","p","Nav","prop","react","Nav_Container","NavButton","isActive","active","Home","onClick","onChange","Icon_Icon","Words","Settings","nav","Nav_templateObject","button","_templateObject2","props","activeCSS","inActiveCSS","css","_templateObject3","_templateObject4","special","KEYS","map","row","split","getKey","key","word","fakeKeys","random","seedRandom","visible","includes","Key","Key_Container","isSpace","symbol","Key_templateObject","highlight","Key_templateObject2","Keyboard","Keyboard_Container","originalWord","arguments","length","undefined","toLowerCase","k","getKeysForWord","i","Row","Key_Key","onPress","Keyboard_templateObject","Keyboard_templateObject2","reducerFunc","Typewriter","progress","typed","substr","starts","repeat","Typewriter_Container","lib_default","widthOnly","maxFontSize","TypeWrapper","Typed","Typewriter_Pipe","Stars","Typewriter_templateObject","Typewriter_templateObject2","span","Typewriter_templateObject3","Typewriter_templateObject4","Pipe","pipeSpring","useSpring","transform","from","PipeContainer","style","animated","_templateObject5","initialState","route","createStore","state","action","type","Object","objectSpread","payload","concat","toConsumableArray","id","uuid","filter","Error","console","log","GlobalStateProvider","dispatch","useGlobalState","useRouter","_useGlobalState","slicedToArray","setRoute","useWords","addWord","translation","example","removeWord","randomWord","Math","floor","Game_templateObject","Game_templateObject2","Bottom","Game_templateObject3","Complete","Game_templateObject4","Button","Game_templateObject5","Logo","reSpring","opacity","delay","wordSpring","Logo_Container","First","Logo_Pipe","Last","h1","Logo_templateObject","Logo_templateObject2","Logo_templateObject3","Logo_templateObject4","Home_templateObject","WordsCount","Home_templateObject2","CircleButton","Home_templateObject3","H1","Settings_templateObject","Header","Words_templateObject","AddButton","Words_templateObject2","screens","_screens","defineProperty","Home_Container","Logo_Logo","Game","_useWords","_useState","useState","_useState2","search","setSearch","_useState3","_useState4","setWord","_useState5","_useState6","setTranslation","_useState7","_useState8","setExample","value","e","target","placeholder","trim","setProgress","wordRight","isComplete","Game_Container","Game_Row","Typewriter_Typewriter","Keyboard_Keyboard","toLocaleLowerCase","Content","main","App_templateObject","NavContainer","App_templateObject2","Boolean","window","location","hostname","match","render","_useGlobalState3","useEffect","localStorage","setItem","JSON","stringify","json","getItem","wordsFromStorage","parse","useWordsPersist","_useRouter","Page","Fragment","Nav_Nav","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99756010.chunk.js","sourcesContent":["export const brand = '#9438EA'\nexport const white = '#FFFFFF'\nexport const black = '#000000'\nexport const light = 'rgba(0, 0, 0, 0.1)'\nexport const muted = 'rgba(0, 0, 0, 0.3)'\nexport const gray = 'rgba(0, 0, 0, 0.6)'\nexport const good = '#AED900'\nexport const danger = '#EA388D'\n","import React from 'react'\n\nexport const home = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M5 12.5H2L12 3.5L22 12.5H19V20.5H13V14.5H11V20.5H5V12.5ZM17 10.69L12 6.19L7 10.69V18.5H9V12.5H15V18.5H17V10.69Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const play = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 61 61\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M44.4792 30.5L16.5208 48.2917V12.7083L44.4792 30.5ZM34.9988 30.5L21.6042 21.96V39.04L34.9988 30.5Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const plus = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path d=\"M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z\" />\n    </svg>\n)\n","import React from 'react'\n\nexport const profile = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4ZM14 8C14 6.9 13.1 6 12 6C10.9 6 10 6.9 10 8C10 9.1 10.9 10 12 10C13.1 10 14 9.1 14 8ZM18 18C17.8 17.29 14.7 16 12 16C9.31 16 6.23 17.28 6 18H18ZM4 18C4 15.34 9.33 14 12 14C14.67 14 20 15.34 20 18V20H4V18Z\"\n        />\n    </svg>\n)\n","import React from 'react'\n\nexport const words = (size: number) => (\n    <svg width={size} height={size} viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M12.87 15.07L10.33 12.56L10.36 12.53C12.1 10.59 13.34 8.36 14.07 6H17V4H10V2H8V4H1V5.99H12.17C11.5 7.92 10.44 9.75 9 11.35C8.07 10.32 7.3 9.19 6.69 8H4.69C5.42 9.63 6.42 11.17 7.67 12.56L2.58 17.58L4 19L9 14L12.11 17.11L12.87 15.07ZM18.5 10H16.5L12 22H14L15.12 19H19.87L21 22H23L18.5 10ZM17.5 12.67L15.88 17H19.12L17.5 12.67Z\"\n        />\n    </svg>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as icons from './icons'\n\nconst sizes = {\n    normal: 24,\n    large: 62,\n}\n\nexport type IconName = keyof typeof icons\nexport type IconSize = keyof typeof sizes\n\ntype IconProps = {\n    name: IconName\n    size?: IconSize\n    block?: boolean\n}\n\nexport const Icon = ({ name, size = 'normal', block = false }: IconProps) => (\n    <Container block={block}>{icons[name](sizes[size])}</Container>\n)\n\nconst Container = styled.div<{ block: boolean }>`\n    display: ${p => (p.block ? 'block' : 'inline-block')};\n    vertical-align: middle;\n    svg {\n        display: block;\n        margin: auto;\n        fill: currentColor;\n    }\n`\n","export enum RouteName {\n    Home = 'home',\n    Words = 'words',\n    Settings = 'settings',\n    Game = 'game',\n}\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { white, gray, brand } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Icon } from '../Icon'\nimport { fast } from '../../styles/transitions'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const NAV_HEIGHT = 60\n\ntype NavProps = {\n    active: RouteName\n    onChange(page: RouteName): void\n}\n\nexport const Nav = (prop: NavProps) => {\n    return (\n        <Container>\n            <NavButton\n                isActive={prop.active === RouteName.Home}\n                onClick={() => prop.onChange(RouteName.Home)}\n            >\n                <Icon name=\"home\" block />\n                Home\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Words}\n                onClick={() => prop.onChange(RouteName.Words)}\n            >\n                <Icon name=\"words\" block />\n                Words\n            </NavButton>\n            <NavButton\n                isActive={prop.active === RouteName.Settings}\n                onClick={() => prop.onChange(RouteName.Settings)}\n            >\n                <Icon name=\"profile\" block />\n                Settings\n            </NavButton>\n        </Container>\n    )\n}\n\nconst Container = styled.nav`\n    background: ${white};\n    display: flex;\n    width: 100%;\n    min-height: ${NAV_HEIGHT}px;\n    justify-content: space-evenly;\n    box-shadow: ${barShadow};\n    overflow: hidden;\n`\n\nconst NavButton = styled.button<{ isActive: boolean }>`\n    color: ${props => (props.isActive ? brand : gray)};\n    display: block;\n    background: none;\n    border: none;\n    padding: 10px 25px;\n    position: relative;\n    line-height: 1.5em;\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 100%;\n        height: 60px;\n        width: 60px;\n        position: absolute;\n        margin: auto;\n        top: -50px;\n        bottom: -50px;\n        left: -50px;\n        right: -50px;\n        ${props => (props.isActive ? activeCSS : inActiveCSS)};\n    }\n    &:active::after {\n        transition: opacity 0.6s ease-out, background 0.6s ease-out, transform 1s ease-out;\n        opacity: 0.1;\n        transform: scale(1.2);\n        background: ${brand};\n    }\n`\n\nconst activeCSS = css`\n    transition: all ${fast};\n    opacity: 0;\n    transform: scale(2);\n    background: ${brand};\n`\n\nconst inActiveCSS = css`\n    transition: all 0 ease;\n    opacity: 0.3;\n    transform: scale(1);\n    background: rgba(255, 255, 255, 0);\n`\n","export const barShadow = '0 0 10px rgba(0, 0, 0, 0.1)'\nexport const floatingShadow = '2px 2px 7px rgba(0, 0, 0, 0.1)'\n","export const fast = '0.2s ease'\n","import seedRandom from 'seed-random'\n\nconst special = \"' ,\"\n\nconst KEYS = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm', special].map(row => row.split(''))\n\ntype WordKey = {\n    visible: boolean\n    key: string\n}\n\ntype WordKeyList = WordKey[][]\n\nexport const getKeysForWord = (originalWord: string, fakeKeys = 0): WordKeyList => {\n    const word = originalWord.toLowerCase()\n\n    return KEYS.map(row => row.map(k => getKey(k, word, fakeKeys)))\n}\n\nconst getKey = (key: string, word: string, fakeKeys: number): WordKey => {\n    const random = fakeKeys ? seedRandom(key + word)() : 0\n\n    return {\n        key,\n        visible: word.includes(key) || (fakeKeys > random && !special.includes(key)),\n    }\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { brand, white } from '../../styles/colors'\nimport { fast } from '../../styles/transitions'\n\ninterface KeyProps {\n    onClick(): void\n    symbol?: string\n    visible?: boolean\n}\n\nexport const Key = (props: KeyProps) => (\n    <Container\n        visible={props.visible}\n        onClick={props.onClick}\n        isSpace={props.symbol === ' '}\n    >\n        {props.symbol}\n    </Container>\n)\n\nconst Container = styled.button<{ visible?: boolean; isSpace?: boolean }>`\n    width: ${p => (p.isSpace ? '47vw' : '8vw')};\n    height: 7vh;\n    padding: 0;\n    margin: 0 4px;\n    border: 2px solid ${brand};\n    opacity: ${p => (p.visible ? 1 : 0.1)};\n    border-radius: 4px;\n    color: ${brand};\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    background: none;\n    transition: all ${fast};\n\n    ${p => p.visible && highlight}\n`\nconst highlight = css`\n    &:active {\n        outline: none;\n        background-color: ${brand};\n        color: ${white};\n    }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { getKeysForWord } from './getKeysForWord'\nimport { white } from '../../styles/colors'\nimport { barShadow } from '../../styles/shadow'\nimport { Key } from './Key'\n\ninterface KeyboardProps {\n    word: string\n    onPress(key: string): void\n    fakeKeys?: number\n}\n\nexport const Keyboard = (props: KeyboardProps) => (\n    <Container>\n        {getKeysForWord(props.word, props.fakeKeys).map((row, i) => (\n            <Row key={i}>\n                {row.map(k => (\n                    <Key\n                        key={k.key}\n                        symbol={k.key}\n                        visible={k.visible}\n                        onClick={() => {\n                            if (k.visible) {\n                                props.onPress(k.key)\n                            }\n                        }}\n                    />\n                ))}\n            </Row>\n        ))}\n    </Container>\n)\n\nconst Container = styled.div`\n    padding: 0 0 50px;\n    background: ${white};\n    box-shadow: ${barShadow};\n`\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 10px 5px 0;\n`\n\nexport const vibrateOk = () => navigator.vibrate(1)\nexport const vibrateBad = () => navigator.vibrate([1, 100, 1, 100, 1])\n","import React from 'react'\nimport styled from 'styled-components'\nimport ScaleText from 'react-scale-text'\nimport { animated, useSpring } from 'react-spring'\nimport { brand, muted } from '../../styles/colors'\n\ntype TypewriterProps = {\n    word: string\n    progress: number\n}\n\nexport const Typewriter = (props: TypewriterProps) => {\n    const { word, progress } = props\n    const typed = word.substr(0, progress)\n    const starts = '*'.repeat(word.length - progress)\n\n    return (\n        <Container>\n            <ScaleText widthOnly={true} maxFontSize={74}>\n                <TypeWrapper>\n                    <Typed>{typed}</Typed>\n                    <Pipe key={typed} />\n                    <Stars>{starts}</Stars>\n                </TypeWrapper>\n            </ScaleText>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    text-align: center;\n    font-size: 74px;\n    font-weight: normal;\n    padding: 10px 25px;\n    overflow: hidden;\n    width: 100%;\n`\nconst TypeWrapper = styled.div`\n    white-space: nowrap;\n    position: relative;\n    width: 100%;\n`\nconst Typed = styled.span`\n    display: inline-block;\n`\n\nconst Stars = styled.span`\n    display: inline-block;\n    color: ${muted};\n`\n\nexport const Pipe = () => {\n    const pipeSpring = useSpring({\n        transform: 'translate(0)',\n        from: {\n            transform: 'translate(-0.3em)',\n        },\n    })\n\n    return <PipeContainer style={pipeSpring} />\n}\n\nconst PipeContainer = styled(animated.span)`\n    display: inline-block;\n    height: 1em;\n    width: 0.1em;\n    margin: 0 0.05em;\n    vertical-align: middle;\n    background-color: ${brand};\n`\n","import { Actions } from '../types/Actions'\nimport { State } from '../types/State'\nimport { reducer } from '../reducer'\n\nexport const reducerLogger = (reducerFunc: typeof reducer) => (\n    state: State,\n    action: Actions\n) => {\n    console.log('→', action.type, action.payload)\n    return reducerFunc(state, action)\n}\n","import { RouteName } from '../types/RouteName'\nimport { State } from './types/State'\n\nexport const initialState: State = {\n    route: RouteName.Home,\n    words: [],\n}\n","import { createStore } from 'react-hooks-global-state'\nimport { reducerLogger } from './helpers/reducerLogger'\nimport { initialState } from './initialState'\nimport { reducer } from './reducer'\n\nexport const { GlobalStateProvider, dispatch, useGlobalState } = createStore(\n    reducerLogger(reducer),\n    initialState\n)\n","import uuid from 'uuid'\nimport { Actions } from './types/Actions'\nimport { State } from './types/State'\n\nexport const reducer = (state: State, action: Actions) => {\n    switch (action.type) {\n        case 'ROUTER/SET_ROUTE':\n            return {\n                ...state,\n                route: action.payload.route,\n            }\n\n        case 'WORDS/SET':\n            return {\n                ...state,\n                words: action.payload,\n            }\n\n        case 'WORDS/ADD_WORD':\n            return {\n                ...state,\n                words: [...state.words, { id: uuid(), ...action.payload }],\n            }\n\n        case 'WORDS/REMOVE_WORD':\n            return {\n                ...state,\n                words: state.words.filter(word => word.id !== action.payload.id),\n            }\n\n        default:\n            throw new Error('[reducer] Unknown action type!')\n    }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { RouteName } from './types/RouteName'\n\nexport const useRouter = () => {\n    const [route] = useGlobalState('route')\n\n    const setRoute = (route: RouteName) => {\n        dispatch({ type: 'ROUTER/SET_ROUTE', payload: { route } })\n    }\n\n    return { route, setRoute }\n}\n","import { dispatch, useGlobalState } from './state/store'\nimport { useEffect } from 'react'\n\nexport const useWords = () => {\n    const [words] = useGlobalState('words')\n\n    const addWord = (name: string, translation: string, example?: string) => {\n        dispatch({ type: 'WORDS/ADD_WORD', payload: { name, translation, example } })\n    }\n\n    const removeWord = (id: string) => {\n        dispatch({ type: 'WORDS/REMOVE_WORD', payload: { id } })\n    }\n\n    const randomWord = () => {\n        return words[Math.floor(Math.random() * words.length)]\n    }\n\n    return { words, addWord, removeWord, randomWord }\n}\n\nexport const useWordsPersist = () => {\n    const [words] = useGlobalState('words')\n\n    useEffect(() => {\n        if (words.length) {\n            localStorage.setItem('words', JSON.stringify(words))\n        }\n    }, [words])\n\n    useEffect(() => {\n        const json = localStorage.getItem('words')\n        if (json) {\n            const wordsFromStorage = JSON.parse(json)\n            dispatch({ type: 'WORDS/SET', payload: wordsFromStorage })\n        }\n    }, [])\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Keyboard } from '../../components/Keyboard'\nimport { Typewriter } from '../../components/Typewriter'\nimport { useWords } from '../../store'\nimport { Word } from '../../store/state/types/State'\nimport { Icon } from '../../components/Icon'\nimport { good, white } from '../../styles/colors'\nimport { floatingShadow } from '../../styles/shadow'\nimport ScaleText from 'react-scale-text'\n\nexport const Game = () => {\n    const { randomWord } = useWords()\n    const [progress, setProgress] = useState(0)\n    const [word, setWord] = useState(randomWord())\n\n    const wordRight = word.name.substr(progress)\n    const isComplete = progress === word.name.length\n\n    const handleKeyPress = (key: string) => {\n        const currentWord = word.name[progress].toLocaleLowerCase()\n        if (key === currentWord) {\n            setProgress(progress + 1)\n        }\n    }\n\n    const handleNextWord = () => {\n        setWord(randomWord())\n        setProgress(0)\n    }\n\n    return (\n        <Container>\n            <Row>\n                <ScaleText maxFontSize={24}>\n                    <div>\n                        <h1>{word.translation}</h1>\n                        <h5>{isComplete ? word.example : '\\u00a0'}</h5>\n                    </div>\n                </ScaleText>\n            </Row>\n            <Row>\n                <Typewriter word={word.name} progress={progress} />\n            </Row>\n            <Bottom>\n                <Keyboard word={wordRight} onPress={handleKeyPress} />\n                {isComplete && (\n                    <Complete>\n                        <h2>Done!</h2>\n                        <Button onClick={handleNextWord}>\n                            Next word\n                            <Icon name=\"play\" />\n                        </Button>\n                    </Complete>\n                )}\n            </Bottom>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    /* display: grid; */\n    /* grid-template-rows: 1fr 2fr auto; */\n    height: 100%;\n    flex-direction: column;\n    display: flex;\n    align-items: center;\n    justify-items: center;\n    text-align: center;\n    overflow: hidden;\n`\nconst Row = styled.div`\n    width: 100%;\n    flex: 1 0 auto;\n`\n\nconst Bottom = styled.div`\n    width: 100%;\n    position: relative;\n`\n\nconst Complete = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Button = styled.button`\n    padding: 30px 50px;\n    border: none;\n    color: ${white};\n    background: ${good};\n    border-radius: 4px;\n    box-shadow: ${floatingShadow};\n    font-weight: bold;\n    font-size: 24px;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useSpring, animated } from 'react-spring'\nimport { brand } from '../../styles/colors'\n\nexport const Logo = () => {\n    const reSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 200,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const wordSpring = useSpring({\n        opacity: 1,\n        transform: 'translate(0)',\n        delay: 300,\n        from: {\n            opacity: 0,\n            transform: 'translate(-0.2em)',\n        },\n    })\n    const pipeSpring = useSpring({\n        transform: 'translate(0) scaleX(1)',\n        from: {\n            transform: 'translate(-1.2em) scaleX(5)',\n        },\n    })\n\n    return (\n        <Container>\n            <First style={reSpring}>Re</First>\n            <Pipe style={pipeSpring} />\n            <Last style={wordSpring}>word</Last>\n        </Container>\n    )\n}\n\nconst Container = styled.h1`\n    text-align: center;\n    font-size: 74px;\n    font-weight: normal;\n`\n\nconst First = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Last = styled(animated.span)`\n    display: inline-block;\n`\n\nconst Pipe = styled(animated.span)`\n    display: inline-block;\n    height: 1em;\n    width: 0.1em;\n    margin: 0 0.05em;\n    vertical-align: middle;\n    background-color: ${brand};\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Logo } from '../../components/Logo'\nimport { useWords, useRouter } from '../../store'\nimport { RouteName } from '../../store/types/RouteName'\nimport { white, brand } from '../../styles/colors'\nimport { floatingShadow } from '../../styles/shadow'\nimport { Icon } from '../../components/Icon'\n\nexport const Home = () => {\n    const { setRoute } = useRouter()\n    const { words } = useWords()\n    return (\n        <Container>\n            <Logo />\n            {words.length ? (\n                <>\n                    <CircleButton onClick={() => setRoute(RouteName.Game)}>\n                        <Icon name=\"play\" size=\"large\" />\n                        <span>Play</span>\n                    </CircleButton>\n                    <WordsCount>\n                        You added <b>{words.length}</b> words\n                    </WordsCount>\n                </>\n            ) : (\n                <CircleButton onClick={() => setRoute(RouteName.Words)}>\n                    <Icon name=\"plus\" size=\"large\" />\n                    <span>Word</span>\n                </CircleButton>\n            )}\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n    display: grid;\n    height: 100%;\n    /* grid-template-rows: 2fr 2fr 2fr; */\n    grid-auto-rows: 0.5fr 3fr 1fr;\n    align-items: center;\n    justify-items: center;\n`\n\nconst WordsCount = styled.div`\n    padding: 25px;\n    text-align: center;\n`\n\nconst playSize = '45vmin'\n\nconst CircleButton = styled.button`\n    background: ${white};\n    border: none;\n    box-shadow: ${floatingShadow};\n    width: ${playSize};\n    height: ${playSize};\n    max-width: 260px;\n    max-height: 260px;\n    border-radius: 100%;\n    color: ${brand};\n    font-size: 36px;\n\n    span {\n        display: block;\n    }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useRouter } from '../../store'\nimport { RouteName } from '../../store/types/RouteName'\n\nexport const Settings = () => {\n    const { setRoute } = useRouter()\n    return (\n        <div>\n            <H1>Settings</H1>\n            <button onClick={() => setRoute(RouteName.Home)}>Save settings</button>\n        </div>\n    )\n}\n\nconst H1 = styled.h1``\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWords } from '../../store'\n\nexport const Words = () => {\n    const { words, addWord, removeWord } = useWords()\n    const [search, setSearch] = useState('')\n\n    const [word, setWord] = useState('')\n    const [translation, setTranslation] = useState('')\n    const [example, setExample] = useState('')\n\n    const addNewWord = () => {\n        addWord(word.trim(), translation.trim(), example.trim())\n        setWord('')\n        setTranslation('')\n        setExample('')\n    }\n\n    return (\n        <div>\n            <Header>Words</Header>\n            <input\n                type=\"search\"\n                value={search}\n                onChange={e => setSearch(e.target.value)}\n                placeholder=\"Search…\"\n            />\n            <table>\n                <thead>\n                    <tr>\n                        <td>Word</td>\n                        <td>Translation</td>\n                        <td>Example</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {words\n                        .filter(word => word.name.includes(search))\n                        .map(word => (\n                            <tr key={word.id}>\n                                <td>\n                                    <b>{word.name}</b>\n                                </td>\n                                <td>\n                                    <i>{word.translation}</i>\n                                </td>\n                                <td>{word.example && <small>{word.example}</small>}</td>\n                                <td>\n                                    <button onClick={() => removeWord(word.id)}>x</button>\n                                </td>\n                            </tr>\n                        ))}\n                </tbody>\n            </table>\n            <div>\n                Word:\n                <input type=\"text\" value={word} onChange={e => setWord(e.target.value)} />\n            </div>\n            <div>\n                Translation:\n                <input\n                    type=\"text\"\n                    value={translation}\n                    onChange={e => setTranslation(e.target.value)}\n                />\n            </div>\n            <div>\n                Example:\n                <input\n                    type=\"text\"\n                    value={example}\n                    onChange={e => setExample(e.target.value)}\n                />\n            </div>\n            <AddButton onClick={addNewWord}>Add new word</AddButton>\n        </div>\n    )\n}\n\nconst Header = styled.h1``\n\nconst AddButton = styled.button``\n","import React, { ElementType } from 'react'\nimport styled from 'styled-components'\nimport { Nav, NAV_HEIGHT } from './components/Nav'\nimport { Game } from './screens/Game/Game'\nimport { Home } from './screens/Home'\nimport { Settings } from './screens/Settings'\nimport { Words } from './screens/Words'\nimport { useRouter, useWordsPersist } from './store'\nimport { RouteName } from './store/types/RouteName'\n\nconst screens: Record<RouteName, ElementType> = {\n    [RouteName.Home]: Home,\n    [RouteName.Words]: Words,\n    [RouteName.Settings]: Settings,\n    [RouteName.Game]: Game,\n}\n\nexport const App = () => {\n    useWordsPersist()\n    const { route, setRoute } = useRouter()\n    const Page = screens[route]\n\n    return (\n        <>\n            <Content>\n                <Page />\n            </Content>\n            <NavContainer>\n                <Nav active={route} onChange={setRoute} />\n            </NavContainer>\n        </>\n    )\n}\n\nconst Content = styled.main`\n    height: calc(100% - ${NAV_HEIGHT}px);\n    max-width: 100%;\n    position: relative;\n    width: 100%;\n    overflow-y: auto;\n`\n\nconst NavContainer = styled.div`\n    position: fixed;\n    bottom: 0;\n    right: 0;\n    left: 0;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/global.css'\nimport { GlobalStateProvider } from './store'\n\nrender(\n    <GlobalStateProvider>\n        <App />\n    </GlobalStateProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}