{"version":3,"file":"main.44af1e66fabdb85b796c.bundle.js","sources":["webpack:///./src/components/EditableList/EditableList.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\ntype EditableListProps = {\n    list: string[]\n    onChange: (list: string[]) => void\n}\nexport const EditableList = (props: EditableListProps) => (\n    <DragDropContext\n        onDragEnd={result => {\n            console.log(result)\n            if (!result.destination) return\n\n            const items = reorder(\n                props.list,\n                result.source.index,\n                result.destination.index\n            )\n            props.onChange(items)\n        }}\n    >\n        <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n                <List {...provided.droppableProps} ref={provided.innerRef}>\n                    {props.list.map((item, index) => (\n                        <Draggable key={item} draggableId={item} index={index}>\n                            {(provided, snapshot) => (\n                                <ListElement\n                                    key={index}\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={provided.draggableProps.style}\n                                >\n                                    {item}\n                                    <Cross\n                                        onClick={() => {\n                                            props.onChange(remove(props.list, index))\n                                        }}\n                                    />\n                                </ListElement>\n                            )}\n                        </Draggable>\n                    ))}\n                    {provided.placeholder}\n                </List>\n            )}\n        </Droppable>\n    </DragDropContext>\n)\n\nconst remove = (list: string[], index: number) => list.filter((el, i) => index !== i)\n\nconst reorder = (list: string[], startIndex: number, endIndex: number) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\nconst List = styled.div``\nconst ListElement = styled.div`\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n`\nconst Cross = styled.button`\n    border-left: 1px solid #ccc;\n    color: red;\n    padding: 3px;\n    :after {\n        content: 'x';\n    }\n`\n"],"mappings":"AAQA","sourceRoot":""}